#!/usr/bin/env python3
"""Inference utility for KOI classifier checkpoints."""

from __future__ import annotations

import argparse
import joblib
import numpy as np
import pandas as pd


def median_impute(X: np.ndarray, medians: np.ndarray) -> np.ndarray:
    X = X.astype(float)
    inds = np.where(np.isnan(X))
    if inds[0].size:
        X[inds] = np.take(medians, inds[1])
    return X


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--model", required=True, help="Checkpoint generated by train_xgb_koi_cv.py")
    parser.add_argument("--inference_csv", required=True, help="CSV file to score")
    parser.add_argument("--out_csv", required=True, help="Output CSV for predictions")
    parser.add_argument("--id_column", default="kepid")
    parser.add_argument("--name_column", default="kepler_name")
    parser.add_argument("--target_column", default="koi_disposition")
    parser.add_argument("--threshold", type=float, default=0.5)
    args = parser.parse_args()

    pack = joblib.load(args.model)
    model = pack["model"]
    feats = pack["feature_cols"]
    medians = pack["medians"]

    df = pd.read_csv(args.inference_csv)
    X = df[feats].apply(pd.to_numeric, errors="coerce").to_numpy(dtype=float)
    X = median_impute(X, medians)

    prob = model.predict_proba(X)[:, 1]
    pred = np.where(prob >= args.threshold, "positive", "negative")

    if args.name_column in df.columns:
        names = df[args.name_column]
    else:
        names = ["" for _ in range(len(df))]

    out = pd.DataFrame({
        args.id_column: df[args.id_column],
        args.name_column: names,
        args.target_column: pred,
    })
    out.to_csv(args.out_csv, index=False)

    rich = out.copy()
    rich["score_positive"] = prob
    rich_path = args.out_csv.rsplit(".", 1)
    if len(rich_path) == 2:
        rich_file = f"{rich_path[0]}_with_score.{rich_path[1]}"
    else:
        rich_file = args.out_csv + "_with_score"
    rich.to_csv(rich_file, index=False)


if __name__ == "__main__":
    main()
